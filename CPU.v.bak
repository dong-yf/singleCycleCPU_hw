// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// PROGRAM		"Quartus II 64-Bit"
// VERSION		"Version 13.0.0 Build 156 04/24/2013 SJ Full Version"
// CREATED		"Sat May 16 08:00:24 2020"

module CPU(
	zero,
	clk,
	reset,
	MemWr,
	MemtoReg,
	RegDst,
	RegWr,
	ALUsrc
);


input wire	zero;
input wire	clk;
input wire	reset;
output wire	MemWr;
output wire	MemtoReg;
output wire	RegDst;
output wire	RegWr;
output wire	ALUsrc;

wire	clk1;
wire	[31:0] instr;
wire	jump;
wire	nPC_sel;
wire	[31:0] PC;





PC	b2v_inst(
	.clk(clk1),
	.reset(reset),
	.nPC_sel(nPC_sel),
	.zero(zero),
	.jump(jump),
	.imm16(instr[15:0]),
	.imm26(instr[25:0]),
	.PC(PC));


Control	b2v_inst2(
	.funct(instr[5:0]),
	.opcode(instr[31:26]),
	.ALUsrc(ALUsrc),
	.MemWr(MemWr),
	.MemtoReg(MemtoReg),
	.RegDst(RegDst),
	.RegWr(RegWr),
	.nPC_sel(nPC_sel),
	.jump(jump)
	);


FDIV	b2v_inst3(
	.CLK(clk),
	.CLK1(clk1));


InstrROM	b2v_inst4(
	.clock(clk1),
	.address(PC[7:0]),
	.q(instr));


endmodule
